    1|       |//
    2|       |//  main.cpp
    3|       |//  assignment3
    4|       |//
    5|       |//  Created by Erik Poole on 1/15/19.
    6|       |//  Copyright Â© 2019 ErikPoole. All rights reserved.
    7|       |//
    8|       |
    9|       |#include <iostream>
   10|       |#include <sstream>
   11|       |#include <cmath>
   12|       |
   13|  2.06k|bool areEquivalent(double double1, double double2) {
   14|  2.06k|    return abs(double1 - double2) < .0001;
   15|  2.06k|}
   16|       |
   17|  1.19k|bool areEquivalent(double double1, double double2, double double3) {
   18|  1.19k|    return abs(double1 - double2) < .0001 && abs(double2 - double3) < .001;
   19|  1.19k|}
   20|       |
   21|       |//****************************************************************************************************
   22|       |//****************************************************************************************************
   23|       |
   24|       |
   25|       |class Point{
   26|       |private:
   27|       |    float x;
   28|       |    float y;
   29|       |    
   30|       |public:
   31|  8.37k|    Point() {
   32|  8.37k|    }
   33|       |    
   34|  1.19k|    Point(const float& xInput, const float& yInput) {
   35|  1.19k|        x = xInput;
   36|  1.19k|        y = yInput;
   37|  1.19k|    }
   38|       |    
   39|  19.3k|    float getX() const {return x;}
   40|  10.9k|    float getY() const {return y;}
   41|       |    
   42|  1.79k|    bool equals(Point inputPoint) {
   43|  1.79k|        if (x == inputPoint.getX()) {
   44|    405|            if (y == inputPoint.getY()) {
   45|      0|                return true;
   46|      0|            }
   47|  1.79k|        }
   48|  1.79k|        return false;
   49|  1.79k|    }
   50|       |};
   51|       |
   52|       |
   53|       |class Line{
   54|       |private:
   55|       |    int xOffset;
   56|       |    int yOffset;
   57|       |    Point pointArr[2];
   58|       |    
   59|       |public:
   60|  1.79k|    Line() {
   61|  1.79k|    }
   62|       |    
   63|  1.79k|    Line(const Point& point1, const Point& point2) {
   64|  1.79k|        pointArr[0] = point1;
   65|  1.79k|        pointArr[1] = point2;
   66|  1.79k|        xOffset = abs(point1.getX() - point2.getX());
   67|  1.79k|        yOffset = abs(point1.getY() - point2.getY());
   68|  1.79k|        
   69|  1.79k|    }
   70|       |    
   71|  1.58k|    double getLength() {
   72|  1.58k|        return sqrt((double) xOffset*xOffset + (double) yOffset*yOffset);
   73|  1.58k|    }
   74|       |    
   75|  7.93k|    double getSlope() {
   76|  7.93k|        //handles 0 slope without division
   77|  7.93k|        if (yOffset == 0) {
   78|  2.21k|            return 0;
   79|  2.21k|        }
   80|  5.71k|        //handles infinite slope without division
   81|  5.71k|        if(xOffset == 0) {
   82|  2.21k|            return INT_MAX;
   83|  2.21k|        }
   84|  3.50k|        
   85|  3.50k|        double slope = (double) yOffset / (double) xOffset;
   86|  3.50k|        if (pointArr[0].getX() > pointArr[1].getX() && pointArr[0].getY() < pointArr[1].getY()) {
   87|    663|            slope *= -1;
   88|    663|        }
   89|  3.50k|        if (pointArr[0].getX() < pointArr[1].getX() && pointArr[0].getY() > pointArr[1].getY()) {
   90|    222|            slope *= -1;
   91|    222|        }
   92|  3.50k|        return slope;
   93|  3.50k|    }
   94|       |};
   95|       |
   96|       |
   97|       |class Shape{
   98|       |private:
   99|       |    Point pointArr[4];
  100|       |    Line sideArr[4];
  101|       |    Line diagonalArr[2];
  102|       |    
  103|       |public:
  104|    299|    Shape(const Point& inputPoint1, const Point& inputPoint2, const Point& inputPoint3) {
  105|    299|        //points
  106|    299|        pointArr[0] = Point(0, 0);
  107|    299|        pointArr[1] = Point(inputPoint1);
  108|    299|        pointArr[2] = Point(inputPoint2);
  109|    299|        pointArr[3] = Point(inputPoint3);
  110|    299|        
  111|    299|        //sides
  112|    299|        sideArr[0] = Line(pointArr[0], pointArr[1]);
  113|    299|        sideArr[1] = Line(pointArr[1], pointArr[2]);
  114|    299|        sideArr[2] = Line(pointArr[2], pointArr[3]);
  115|    299|        sideArr[3] = Line(pointArr[3], pointArr[0]);
  116|    299|        
  117|    299|        //diagonals
  118|    299|        diagonalArr[0] = Line(pointArr[0], pointArr[2]);
  119|    299|        diagonalArr[1] = Line(pointArr[1], pointArr[3]);
  120|    299|        
  121|    299|    }
  122|       |    
  123|  3.73k|    Line getSide(const int& sideNumber) const {return sideArr[sideNumber];}
  124|    398|    Line getDiagonal(int diagonalNumber) const {return diagonalArr[diagonalNumber];}
  125|       |
  126|    299|    bool isValid() {
  127|    299|        //checks intersecting points
  128|  1.49k|        for (int i = 0; i < sizeof(pointArr)/sizeof(Point); i++) {
  129|  2.99k|            for (int j = i+1; j < sizeof(pointArr)/sizeof(Point); j++) {
  130|  1.79k|                if (pointArr[i].equals(pointArr[j])) {
  131|      0|                    std::cout << "error 2" << std::endl;
  132|      0|                    return false;
  133|      0|                }
  134|  1.79k|            }
  135|  1.19k|        }
  136|    299|        //checks 3 colinear points
  137|  1.49k|        for (int i = 0; i < sizeof(pointArr)/sizeof(Point); i++) {
  138|  1.19k|            int j = (i + 1) % 4;
  139|  1.19k|            int k = i % 2;
  140|  1.19k|            if (areEquivalent(sideArr[i].getSlope(), sideArr[j].getSlope(), diagonalArr[k].getSlope())) {
  141|      1|                std::cout << "error 4" << std::endl;
  142|      1|                return false;
  143|      1|            }
  144|  1.19k|        }
  145|    299|        
  146|    299|        //checks crossing points
  147|    299|        //checks clockwise:
  148|    299|        if (sideArr[3].getSlope() < sideArr[0].getSlope()) {
  149|     52|            if (sideArr[3].getSlope() > diagonalArr[0].getSlope()) {
  150|     12|                //if second line's slope is negative
  151|     12|                if (sideArr[1].getSlope() < 0) {
  152|     10|                    //if third line's slope is positive
  153|     10|                    if (sideArr[2].getSlope() > 0) {
  154|      7|                        std::cout << "error 3" << std::endl;
  155|      7|                        return false;
  156|      7|                    //if third line's slope is negative
  157|      7|                    } else if (sideArr[2].getSlope() < sideArr[1].getSlope()) {
  158|      1|                        std::cout << "error 3" << std::endl;
  159|      1|                        return false;
  160|      1|                    }
  161|      2|                //if second line's slope is positive
  162|      2|                } else {
  163|      2|                    if (diagonalArr[1].getSlope() > sideArr[1].getSlope()) {
  164|      2|                        std::cout << "error 3" << std::endl;
  165|      2|                        return false;
  166|      2|                    }
  167|     40|                }
  168|     40|            } else {
  169|     40|                if (sideArr[0].getSlope() < diagonalArr[0].getSlope()) {
  170|     21|                    std::cout << "error 3" << std::endl;
  171|     21|                    return false;
  172|     21|                }
  173|    246|            }
  174|    246|        //checks counter-clockwise:
  175|    246|        } else {
  176|    246|            if (sideArr[3].getSlope() < diagonalArr[0].getSlope()) {
  177|     14|                //if second line's slope is positive
  178|     14|                if (sideArr[1].getSlope() > 0) {
  179|      3|                    //if third line's slope is negative
  180|      3|                    if (sideArr[2].getSlope() < 0) {
  181|      2|                        std::cout << "error 3" << std::endl;
  182|      2|                        return false;
  183|      2|                        //if third line's slope is positive
  184|      2|                    } else if (sideArr[2].getSlope() > sideArr[1].getSlope()) {
  185|      0|                        std::cout << "error 3" << std::endl;
  186|      0|                        return false;
  187|      0|                    }
  188|     11|                    //if second line's slope is negative
  189|     11|                } else {
  190|     11|                    if (diagonalArr[1].getSlope() < sideArr[1].getSlope()) {
  191|      2|                        std::cout << "error 3" << std::endl;
  192|      2|                        return false;
  193|      2|                    }
  194|    232|                }
  195|    232|            } else {
  196|    232|                if (sideArr[0].getSlope() > diagonalArr[0].getSlope()) {
  197|     17|                    std::cout << "error 3" << std::endl;
  198|     17|                    return false;
  199|     17|                }
  200|    246|            }
  201|    246|        }
  202|    246|        return true;
  203|    246|    }
  204|       |
  205|       |};
  206|       |
  207|       |//****************************************************************************************************
  208|       |//****************************************************************************************************
  209|       |
  210|       |
  211|    682|bool isParallelogram(const Shape& inputShape) {
  212|    682|    if (areEquivalent(inputShape.getSide(0).getSlope(), inputShape.getSide(2).getSlope())) {
  213|    494|        if (areEquivalent(inputShape.getSide(1).getSlope(), inputShape.getSide(3).getSlope())) {
  214|    494|            return true;
  215|    494|        }
  216|    188|    }
  217|    188|    return false;
  218|    188|}
  219|       |
  220|    246|bool isRectangle(const Shape& inputShape) {
  221|    246|    if (isParallelogram(inputShape)) {
  222|    199|        if (areEquivalent(inputShape.getDiagonal(0).getLength(), inputShape.getDiagonal(1).getLength())) {
  223|    199|            return true;
  224|    199|        }
  225|     47|    }
  226|     47|    return false;
  227|     47|}
  228|       |
  229|    389|bool isRhombus(const Shape& inputShape) {
  230|    389|    if (!isParallelogram(inputShape)) {
  231|     94|        return false;
  232|     94|    }
  233|    604|    for (int i = 0; i < 3; i++) {
  234|    501|        if (!areEquivalent(inputShape.getSide(i).getLength(), inputShape.getSide(i+1).getLength())) {
  235|    192|            return false;
  236|    192|        }
  237|    501|    }
  238|    295|    return true;
  239|    295|}
  240|       |
  241|    246|bool isSquare(const Shape& inputShape) {
  242|    246|    return isRhombus(inputShape) && isRectangle(inputShape);
  243|    246|}
  244|       |
  245|     47|bool isKite(const Shape& inputShape) {
  246|     47|    if (areEquivalent(inputShape.getSide(0).getLength(), inputShape.getSide(1).getLength())) {
  247|      0|        if (areEquivalent(inputShape.getSide(2).getLength(), inputShape.getSide(3).getLength())) {
  248|      0|            return true;
  249|      0|        }
  250|     47|    }
  251|     47|    if (areEquivalent(inputShape.getSide(1).getLength(), inputShape.getSide(2).getLength())) {
  252|      0|        if (areEquivalent(inputShape.getSide(3).getLength(), inputShape.getSide(0).getLength())) {
  253|      0|            return true;
  254|      0|        }
  255|     47|    }
  256|     47|    return false;
  257|     47|}
  258|       |
  259|     47|bool isTrapezoid(const Shape& inputShape) {
  260|     47|    if (areEquivalent(inputShape.getSide(0).getSlope(), inputShape.getSide(2).getSlope())) {
  261|      0|        if (!areEquivalent(inputShape.getSide(1).getSlope(), inputShape.getSide(3).getSlope())) {
  262|      0|            return true;
  263|      0|        }
  264|     47|    }
  265|     47|    if (areEquivalent(inputShape.getSide(1).getSlope(), inputShape.getSide(3).getSlope())) {
  266|      0|        if (!areEquivalent(inputShape.getSide(0).getSlope(), inputShape.getSide(2).getSlope())) {
  267|      0|            return true;
  268|      0|        }
  269|     47|    }
  270|     47|    return false;
  271|     47|}
  272|       |
  273|       |//****************************************************************************************************
  274|       |//****************************************************************************************************
  275|       |
  276|    399|bool isValidInput(std::string inputString) {
  277|    399|    if (!std::isdigit(inputString[0])) {
  278|     85|        return false;
  279|     85|    }
  280|    314|    int numberCount = 1;
  281|    314|    int spaceCount = 0;
  282|    314|    int valueCount = 1;
  283|  4.30k|    for (int i = 1; i < inputString.length()-1; i++) {
  284|  4.00k|        if (std::isdigit(inputString[i])) {
  285|  2.49k|            numberCount++;
  286|  2.49k|            spaceCount = 0;
  287|  2.49k|        } else if (inputString[i] == ' ') {
  288|  1.49k|            numberCount = 0;
  289|  1.49k|            spaceCount++;
  290|  1.49k|            valueCount++;
  291|  1.49k|        } else {
  292|     14|            return false;
  293|     14|        }
  294|  3.98k|        
  295|  3.98k|        if (numberCount > 3 || spaceCount > 1) {
  296|      0|            return false;
  297|      0|        }
  298|  3.98k|    }
  299|    314|    if (valueCount != 6) {
  300|      1|        return false;
  301|      1|    }
  302|    299|    
  303|    299|    return true;
  304|    299|}
  305|       |
  306|       |//****************************************************************************************************
  307|       |//****************************************************************************************************
  308|       |
  309|       |
  310|    400|int main(int argc, const char * argv[]) {
  311|    400|//    std::cout << "poop" << std::endl;
  312|    400|    std::string inputString;
  313|    646|    while(std::getline(std::cin, inputString)) {
  314|    399|        if (!isValidInput(inputString)) {
  315|    100|            std::cout << "error 1" << std::endl;
  316|    100|            return 0;
  317|    100|        }
  318|    299|        
  319|    299|        std::stringstream stringStream(inputString);
  320|    299|        std::string singleInput;
  321|    299|        int inputValueArray[6];
  322|    299|        int *inputValuePointer = inputValueArray;
  323|  2.09k|        while (std::getline(stringStream, singleInput, ' ')){
  324|  1.79k|            *inputValuePointer++ = std::stoi(singleInput);
  325|  1.79k|        }
  326|    299|        
  327|  1.79k|        for (int value : inputValueArray) {
  328|  1.79k|            if (value > 100) {
  329|      0|                std::cout << "error 1" << std::endl;
  330|      0|                return 0;
  331|      0|            }
  332|  1.79k|        }
  333|    299|        
  334|    299|        Point point1(inputValueArray[0], inputValueArray[1]);
  335|    299|        Point point2(inputValueArray[2], inputValueArray[3]);
  336|    299|        Point point3(inputValueArray[4], inputValueArray[5]);
  337|    299|        Shape shape(point1, point2, point3);
  338|    299|        
  339|    299|        if (!shape.isValid()) {
  340|     53|            return 0;
  341|     53|        }
  342|    246|        
  343|    246|        std::string outputString;
  344|    246|        if (isSquare(shape)) {
  345|    103|            outputString = "square";
  346|    143|        } else if (isRhombus(shape)) {
  347|      0|            outputString = "rhombus";
  348|    143|        } else if (isRectangle(shape)) {
  349|     96|            outputString = "rectangle";
  350|     96|        } else if (isParallelogram(shape)) {
  351|      0|            outputString = "parallelogram";
  352|     47|        } else if (isKite(shape)) {
  353|      0|            outputString = "kite";
  354|     47|        } else if (isTrapezoid(shape)) {
  355|      0|            outputString = "trapezoid";
  356|     47|        } else {
  357|     47|            outputString = "quadrilateral";
  358|     47|        }
  359|    246|        std::cout << outputString << std::endl;
  360|    246|    }
  361|    400|}

