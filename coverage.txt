    1|       |//
    2|       |//  main.cpp
    3|       |//  assignment3
    4|       |//
    5|       |//  Created by Erik Poole on 1/15/19.
    6|       |//  Copyright Â© 2019 ErikPoole. All rights reserved.
    7|       |//
    8|       |
    9|       |#include <iostream>
   10|       |#include <sstream>
   11|       |#include <cmath>
   12|       |
   13|    256|bool areEquivalent(double double1, double double2) {
   14|    256|    return abs(double1 - double2) < .0001;
   15|    256|}
   16|       |
   17|    364|bool areEquivalent(double double1, double double2, double double3) {
   18|    364|    return abs(double1 - double2) < .0001 && abs(double2 - double3) < .001;
   19|    364|}
   20|       |
   21|       |//****************************************************************************************************
   22|       |//****************************************************************************************************
   23|       |
   24|       |
   25|       |class Point{
   26|       |private:
   27|       |    float x;
   28|       |    float y;
   29|       |    
   30|       |public:
   31|  2.54k|    Point() {
   32|  2.54k|    }
   33|       |    
   34|    364|    Point(const float& xInput, const float& yInput) {
   35|    364|        x = xInput;
   36|    364|        y = yInput;
   37|    364|    }
   38|       |    
   39|  5.04k|    float getX() const {return x;}
   40|  2.67k|    float getY() const {return y;}
   41|       |    
   42|    546|    bool equals(Point inputPoint) {
   43|    546|        if (x == inputPoint.getX()) {
   44|     12|            if (y == inputPoint.getY()) {
   45|      0|                return true;
   46|      0|            }
   47|    546|        }
   48|    546|        return false;
   49|    546|    }
   50|       |};
   51|       |
   52|       |
   53|       |class Line{
   54|       |private:
   55|       |    int xOffset;
   56|       |    int yOffset;
   57|       |    Point pointArr[2];
   58|       |    
   59|       |public:
   60|    546|    Line() {
   61|    546|    }
   62|       |    
   63|    546|    Line(const Point& point1, const Point& point2) {
   64|    546|        pointArr[0] = point1;
   65|    546|        pointArr[1] = point2;
   66|    546|        xOffset = abs(point1.getX() - point2.getX());
   67|    546|        yOffset = abs(point1.getY() - point2.getY());
   68|    546|        
   69|    546|    }
   70|       |    
   71|    128|    double getLength() {
   72|    128|        return sqrt((double) xOffset*xOffset + (double) yOffset*yOffset);
   73|    128|    }
   74|       |    
   75|  1.76k|    double getSlope() {
   76|  1.76k|        //handles 0 slope without division
   77|  1.76k|        if (yOffset == 0) {
   78|     24|            return 0;
   79|     24|        }
   80|  1.74k|        //handles infinite slope without division
   81|  1.74k|        if(xOffset == 0) {
   82|     40|            return INT_MAX;
   83|     40|        }
   84|  1.70k|        
   85|  1.70k|        double slope = (double) yOffset / (double) xOffset;
   86|  1.70k|        if (pointArr[0].getX() > pointArr[1].getX() && pointArr[0].getY() < pointArr[1].getY()) {
   87|    244|            slope *= -1;
   88|    244|        }
   89|  1.70k|        //impossible to reach given that points are given in counter-clockwise order and only positive inputs
   90|  1.70k|        // point 0 -> 1 will always be either a positive slope or fixed by the first condition above
   91|  1.70k|//        if (pointArr[0].getX() < pointArr[1].getX() && pointArr[0].getY() > pointArr[1].getY()) {
   92|  1.70k|//            slope *= -1;
   93|  1.70k|//        }
   94|  1.70k|        return slope;
   95|  1.70k|    }
   96|       |};
   97|       |
   98|       |
   99|       |class Shape{
  100|       |private:
  101|       |    Point pointArr[4];
  102|       |    Line sideArr[4];
  103|       |    Line diagonalArr[2];
  104|       |    
  105|       |public:
  106|     91|    Shape(const Point& inputPoint1, const Point& inputPoint2, const Point& inputPoint3) {
  107|     91|        //points
  108|     91|        pointArr[0] = Point(0, 0);
  109|     91|        pointArr[1] = Point(inputPoint1);
  110|     91|        pointArr[2] = Point(inputPoint2);
  111|     91|        pointArr[3] = Point(inputPoint3);
  112|     91|        
  113|     91|        //sides
  114|     91|        sideArr[0] = Line(pointArr[0], pointArr[1]);
  115|     91|        sideArr[1] = Line(pointArr[1], pointArr[2]);
  116|     91|        sideArr[2] = Line(pointArr[2], pointArr[3]);
  117|     91|        sideArr[3] = Line(pointArr[3], pointArr[0]);
  118|     91|        
  119|     91|        //diagonals
  120|     91|        diagonalArr[0] = Line(pointArr[0], pointArr[2]);
  121|     91|        diagonalArr[1] = Line(pointArr[1], pointArr[3]);
  122|     91|        
  123|     91|    }
  124|       |    
  125|    512|    Line getSide(const int& sideNumber) const {return sideArr[sideNumber];}
  126|      0|    Line getDiagonal(int diagonalNumber) const {return diagonalArr[diagonalNumber];}
  127|       |
  128|     91|    bool isValid() {
  129|     91|        //checks intersecting points
  130|    455|        for (int i = 0; i < sizeof(pointArr)/sizeof(Point); i++) {
  131|    910|            for (int j = i+1; j < sizeof(pointArr)/sizeof(Point); j++) {
  132|    546|                if (pointArr[i].equals(pointArr[j])) {
  133|      0|                    std::cout << "error 2" << std::endl;
  134|      0|                    return false;
  135|      0|                }
  136|    546|            }
  137|    364|        }
  138|     91|        //checks 3 colinear points
  139|    455|        for (int i = 0; i < sizeof(pointArr)/sizeof(Point); i++) {
  140|    364|            int j = (i + 1) % 4;
  141|    364|            int k = i % 2;
  142|    364|            if (areEquivalent(sideArr[i].getSlope(), sideArr[j].getSlope(), diagonalArr[k].getSlope())) {
  143|      0|                std::cout << "error 4" << std::endl;
  144|      0|                return false;
  145|      0|            }
  146|    364|        }
  147|     91|        
  148|     91|        //checks crossing points
  149|     91|        //assumes counter-clockwise rotation & all values positive
  150|     91|        if (sideArr[3].getSlope() < diagonalArr[1].getSlope() ||
  151|     91|            sideArr[3].getSlope() < sideArr[0].getSlope()) {
  152|     59|            std::cout << "error 3" << std::endl;
  153|     59|            return false;
  154|     59|        }
  155|     32|        
  156|     32|        return true;
  157|     32|    }
  158|       |};
  159|       |
  160|       |//****************************************************************************************************
  161|       |//****************************************************************************************************
  162|       |
  163|       |
  164|    128|bool isParallelogram(const Shape& inputShape) {
  165|    128|    if (areEquivalent(inputShape.getSide(0).getSlope(), inputShape.getSide(2).getSlope())) {
  166|      0|        if (areEquivalent(inputShape.getSide(1).getSlope(), inputShape.getSide(3).getSlope())) {
  167|      0|            return true;
  168|      0|        }
  169|    128|    }
  170|    128|    return false;
  171|    128|}
  172|       |
  173|     32|bool isRectangle(const Shape& inputShape) {
  174|     32|    if (isParallelogram(inputShape)) {
  175|      0|        if (areEquivalent(inputShape.getDiagonal(0).getLength(), inputShape.getDiagonal(1).getLength())) {
  176|      0|            return true;
  177|      0|        }
  178|     32|    }
  179|     32|    return false;
  180|     32|}
  181|       |
  182|     64|bool isRhombus(const Shape& inputShape) {
  183|     64|    if (!isParallelogram(inputShape)) {
  184|     64|        return false;
  185|     64|    }
  186|      0|    for (int i = 0; i < 3; i++) {
  187|      0|        if (!areEquivalent(inputShape.getSide(i).getLength(), inputShape.getSide(i+1).getLength())) {
  188|      0|            return false;
  189|      0|        }
  190|      0|    }
  191|      0|    return true;
  192|      0|}
  193|       |
  194|     32|bool isSquare(const Shape& inputShape) {
  195|     32|    return isRhombus(inputShape) && isRectangle(inputShape);
  196|     32|}
  197|       |
  198|     32|bool isKite(const Shape& inputShape) {
  199|     32|    if (areEquivalent(inputShape.getSide(0).getLength(), inputShape.getSide(1).getLength())) {
  200|      0|        if (areEquivalent(inputShape.getSide(2).getLength(), inputShape.getSide(3).getLength())) {
  201|      0|            return true;
  202|      0|        }
  203|     32|    }
  204|     32|    if (areEquivalent(inputShape.getSide(1).getLength(), inputShape.getSide(2).getLength())) {
  205|      0|        if (areEquivalent(inputShape.getSide(3).getLength(), inputShape.getSide(0).getLength())) {
  206|      0|            return true;
  207|      0|        }
  208|     32|    }
  209|     32|    return false;
  210|     32|}
  211|       |
  212|     32|bool isTrapezoid(const Shape& inputShape) {
  213|     32|    if (areEquivalent(inputShape.getSide(0).getSlope(), inputShape.getSide(2).getSlope())) {
  214|      0|        if (!areEquivalent(inputShape.getSide(1).getSlope(), inputShape.getSide(3).getSlope())) {
  215|      0|            return true;
  216|      0|        }
  217|     32|    }
  218|     32|    if (areEquivalent(inputShape.getSide(1).getSlope(), inputShape.getSide(3).getSlope())) {
  219|      0|        if (!areEquivalent(inputShape.getSide(0).getSlope(), inputShape.getSide(2).getSlope())) {
  220|      0|            return true;
  221|      0|        }
  222|     32|    }
  223|     32|    return false;
  224|     32|}
  225|       |
  226|       |//****************************************************************************************************
  227|       |//****************************************************************************************************
  228|       |
  229|     99|bool isValidInput(std::string inputString) {
  230|     99|    if (!std::isdigit(inputString[0])) {
  231|      0|        return false;
  232|      0|    }
  233|     99|    int numberCount = 1;
  234|     99|    int spaceCount = 0;
  235|     99|    int valueCount = 1;
  236|  1.54k|    for (int i = 1; i < inputString.length()-1; i++) {
  237|  1.44k|        if (std::isdigit(inputString[i])) {
  238|    953|            numberCount++;
  239|    953|            spaceCount = 0;
  240|    953|        } else if (inputString[i] == ' ') {
  241|    495|            numberCount = 0;
  242|    495|            spaceCount++;
  243|    495|            valueCount++;
  244|    495|        } else {
  245|      0|            return false;
  246|      0|        }
  247|  1.44k|        
  248|  1.44k|        if (numberCount > 3 || spaceCount > 1) {
  249|      0|            return false;
  250|      0|        }
  251|  1.44k|    }
  252|     99|    if (valueCount != 6) {
  253|      0|        return false;
  254|      0|    }
  255|     99|    
  256|     99|    return true;
  257|     99|}
  258|       |
  259|       |//****************************************************************************************************
  260|       |//****************************************************************************************************
  261|       |
  262|       |
  263|    100|int main(int argc, const char * argv[]) {
  264|    100|//    std::cout << "poop" << std::endl;
  265|    100|    std::string inputString;
  266|    132|    while(std::getline(std::cin, inputString)) {
  267|     99|        if (!isValidInput(inputString)) {
  268|      0|            std::cout << "error 1" << std::endl;
  269|      0|            return 0;
  270|      0|        }
  271|     99|        
  272|     99|        std::stringstream stringStream(inputString);
  273|     99|        std::string singleInput;
  274|     99|        int inputValueArray[6];
  275|     99|        int *inputValuePointer = inputValueArray;
  276|    693|        while (std::getline(stringStream, singleInput, ' ')){
  277|    594|            *inputValuePointer++ = std::stoi(singleInput);
  278|    594|        }
  279|     99|        
  280|    575|        for (int value : inputValueArray) {
  281|    575|            if (value > 100) {
  282|      8|                std::cout << "error 1" << std::endl;
  283|      8|                return 0;
  284|      8|            }
  285|    575|        }
  286|     99|        
  287|     99|        Point point1(inputValueArray[0], inputValueArray[1]);
  288|     91|        Point point2(inputValueArray[2], inputValueArray[3]);
  289|     91|        Point point3(inputValueArray[4], inputValueArray[5]);
  290|     91|        Shape shape(point1, point2, point3);
  291|     91|        
  292|     91|        if (!shape.isValid()) {
  293|     59|            return 0;
  294|     59|        }
  295|     32|        
  296|     32|        std::string outputString;
  297|     32|        if (isSquare(shape)) {
  298|      0|            outputString = "square";
  299|     32|        } else if (isRhombus(shape)) {
  300|      0|            outputString = "rhombus";
  301|     32|        } else if (isRectangle(shape)) {
  302|      0|            outputString = "rectangle";
  303|     32|        } else if (isParallelogram(shape)) {
  304|      0|            outputString = "parallelogram";
  305|     32|        } else if (isKite(shape)) {
  306|      0|            outputString = "kite";
  307|     32|        } else if (isTrapezoid(shape)) {
  308|      0|            outputString = "trapezoid";
  309|     32|        } else {
  310|     32|            outputString = "quadrilateral";
  311|     32|        }
  312|     32|        std::cout << outputString << std::endl;
  313|     32|    }
  314|    100|}

